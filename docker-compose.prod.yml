services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: sas-mongodb-prod
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-sas_db}
    volumes:
      - mongodb_data:/data/db
    networks:
      - sas-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sas-backend-prod
    restart: unless-stopped
    ports:
      - "5000:5000" # Exposed for direct access (comment out when using nginx)
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGO_URI=mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password123}@mongodb:27017/${MONGO_DATABASE:-sas_db}?authSource=admin
      - JWT_SECRET=${JWT_SECRET}
      - JWT_LIFETIME=${JWT_LIFETIME:-7d}
      - FRONTEND_APP_URL=https://${DOMAIN_NAME}
    depends_on:
      - mongodb
    networks:
      - sas-network

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: https://${DOMAIN_NAME}/api/v1
        VITE_APP_NAME: "SAS - Sales Automation Software"
        VITE_APP_VERSION: "1.0.0"
        VITE_NODE_ENV: production
    container_name: sas-frontend-prod
    restart: unless-stopped
    ports:
      - "5173:80" # Map host 5173 to container 80 for direct access
    depends_on:
      - backend
    networks:
      - sas-network

  # Nginx Reverse Proxy (commented out for now - uncomment for production with SSL)
  # nginx:
  #   image: nginx:alpine
  #   container_name: sas-nginx-prod
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   environment:
  #     - DOMAIN_NAME=${DOMAIN_NAME}
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #     - certbot_www:/var/www/certbot
  #     - certbot_conf:/etc/letsencrypt
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - sas-network

  # Certbot for SSL certificates (commented out for now - uncomment for production with SSL)
  # certbot:
  #   image: certbot/certbot
  #   container_name: sas-certbot
  #   volumes:
  #     - certbot_www:/var/www/certbot
  #     - certbot_conf:/etc/letsencrypt
  #   command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME}
  #   depends_on:
  #     - nginx

volumes:
  mongodb_data:
  # certbot_www:  # Commented out - uncomment when using nginx/certbot
  # certbot_conf:  # Commented out - uncomment when using nginx/certbot

networks:
  sas-network:
    driver: bridge
